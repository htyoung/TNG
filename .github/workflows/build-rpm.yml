name: Build RPM Package

on:
  push:
    branches:
      - 'master'
      - 'native'
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - 'master'
      - 'native'

jobs:
  build:
    runs-on: ubuntu-latest-16-cores
    strategy:
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: Check pre-release
        run: |
          tag="${GITHUB_REF#refs/*/}"
          echo "tag=tag"
          if [[ ${tag} == *alpha* || ${tag} == *beta* ]]
          then
              prerelease=true
          else
              prerelease=false
          fi
          echo "prerelease=$prerelease"
          echo "PRE_RELEASE=$prerelease" >> $GITHUB_ENV

      - uses: dtolnay/rust-toolchain@1.75.0

      - name: Build RPM package
        run: |
          make create-tarball
          make rpm-build-in-docker
          mkdir -p $GITHUB_WORKSPACE/rpmbuild
          cp -r ~/rpmbuild/SRPMS/ $GITHUB_WORKSPACE/rpmbuild/
          cp -r ~/rpmbuild/RPMS/ $GITHUB_WORKSPACE/rpmbuild/
          mkdir -p $GITHUB_WORKSPACE/rpmbuild/SOURCES/
          cp -r /tmp/trusted-network-gateway-*.tar.gz $GITHUB_WORKSPACE/rpmbuild/SOURCES/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: rpm-packages
          if-no-files-found: error
          path: |
            ./rpmbuild/SOURCES/trusted-network-gateway-*.tar.gz
            ./rpmbuild/SRPMS/*.src.rpm
            ./rpmbuild/RPMS/*/*.rpm

  test:
    strategy:
      fail-fast: false
      matrix:
        distro: ["alibaba-cloud-linux-3-registry.cn-hangzhou.cr.aliyuncs.com/alinux3/alinux3:latest", "registry.openanolis.cn/openanolis/anolisos:23"]
        upstream: [ic, coco]
        include:
          - upstream: ic
            aa: https://github.com/inclavare-containers/guest-components.git
            as: https://github.com/openanolis/trustee.git
          - upstream: coco
            aa: https://github.com/confidential-containers/guest-components.git
            as: https://github.com/confidential-containers/trustee.git
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    needs: build
    container:
      image: ${{ matrix.distro }}
      options: --privileged
    steps:
      - name: Install build dependencies
        run: |
          set -e
          set -x

          # replace the mirror
          sed -i -E 's|https?://mirrors.openanolis.cn/anolis/|https://mirrors.aliyun.com/anolis/|g' /etc/yum.repos.d/*.repo
          sed -i -E 's|https?://mirrors.cloud.aliyuncs.com/|https://mirrors.aliyun.com/|g' /etc/yum.repos.d/*.repo

          # install development tools
          yum install -y autoconf automake binutils bison flex gcc gcc-c++ gdb glibc-devel libtool make pkgconf pkgconf-m4 pkgconf-pkg-config rpm-build rpm-sign strace asciidoc byacc ctags diffstat elfutils-libelf-devel git intltool patchutils perl-Fedora-VSP perl-Sys-Syslog perl-generators pesign source-highlight systemtap valgrind valgrind-devel cmake expect rpmdevtools rpmlint perl clang

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Prepare attestation-agent
        run: |
          set -e
          set -x
          git clone ${{ matrix.aa }}
          cd guest-components/attestation-agent
          make ATTESTER=none ttrpc=true
          make install
          RUST_LOG=debug attestation-agent --attestation_sock unix:///run/confidential-containers/attestation-agent/attestation-agent.sock &

      - name: Prepare attestation-service
        run: |
          set -e
          set -x

          yum install -y jq

          cd /tmp ; \
              curl https://download.01.org/intel-sgx/sgx-dcap/1.21/linux/distro/Anolis86/sgx_rpm_local_repo.tgz --output /tmp/sgx_rpm_local_repo.tgz ; \
              tar zxvf /tmp/sgx_rpm_local_repo.tgz ; \
              yum -y install yum-utils ; yum-config-manager --add-repo file:///tmp/sgx_rpm_local_repo ; \
              yum install -y --setopt=install_weak_deps=False --nogpgcheck libsgx-dcap-quote-verify-devel perl wget curl clang openssl-devel protobuf-devel git tpm2-tss tpm2-tss-devel libudev-devel

          # Fix missing FindBin.pm in anolis23
          if yum info perl-FindBin ; then yum install -y perl-FindBin ; fi

          git clone ${{ matrix.as }}
          cd trustee/attestation-service
          cargo install --path . --bin restful-as --features restful-bin --locked

          # Prepare certificates
          yum install -y jq openssl
          openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/as-ca.key -out /tmp/as-ca.pem -nodes -subj "/O=Trustee CA" \
              -addext keyUsage=critical,cRLSign,keyCertSign,digitalSignature
          openssl genrsa -out /tmp/as.key 2048
          openssl req -new -key /tmp/as.key -out /tmp/as.csr -subj "/CN=Trustee/O=Trustee CA"
          openssl x509 -req -in /tmp/as.csr -CA /tmp/as-ca.pem -CAkey /tmp/as-ca.key -CAcreateserial -out /tmp/as.pem -days 365 -extensions v3_req -extfile <(echo -e "[v3_req]\nsubjectKeyIdentifier = hash") -sha256

          # Generate attestation-service config
          if [[ ${{ matrix.upstream }} == "coco" ]]; then
            cat config.json | jq '.attestation_token_broker.signer.cert_path="/tmp/as.pem" | .attestation_token_broker.signer.key_path="/tmp/as.key"' > /tmp/config_with_cert.json
          else
            cat config.json | jq '.attestation_token_config.signer.cert_path="/tmp/as.pem" | .attestation_token_config.signer.key_path="/tmp/as.key"' > /tmp/config_with_cert.json
          fi

          RUST_LOG=debug restful-as --socket 0.0.0.0:8080 --config-file /tmp/config_with_cert.json &

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./
          merge-multiple: false
      - name: Install RPM packages
        run: |
          set -e
          set -x

          # test rpm package install
          yum install -y ./rpm-packages/RPMS/*/trusted-network-gateway-*.rpm
          tng --version
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'true'
      - name: Run test script from repo
        run: |
          set -e
          set -x

          # Append dns server
          echo "nameserver 8.8.8.8" >> /etc/resolv.conf
          # Run test
          make run-test

  release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./
          merge-multiple: false
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          fail_on_unmatched_files: true
          prerelease: ${{ env.PRE_RELEASE }}
          files: |
            ./rpm-packages/SOURCES/trusted-network-gateway-*.tar.gz
            ./rpm-packages/SRPMS/*.src.rpm
            ./rpm-packages/RPMS/*/*.rpm
